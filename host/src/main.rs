// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{ GUEST_PROOFING_LOGIC_ELF, GUEST_PROOFING_LOGIC_ID };

use proving_service_core::product_footprint::ProductProof;
use proving_service_core::sig_container::{self, SignatureContainer};
use serde::{ Serialize };
use rdkafka::consumer::{ Consumer, StreamConsumer };
use rdkafka::producer::{ FutureProducer, FutureRecord };
use rdkafka::config::ClientConfig;
use tokio::time::Duration;
use rdkafka::message::Message;
use log::info;
use std::fs::File;
use std::io::Write;
use proving_service_core::proofing_document::*;
use risc0_zkvm::{ default_prover, ExecutorEnv, serde::{from_slice, to_vec}, };
use env_helper::process_and_write_proofs;
use base64::{ engine::general_purpose, Engine as _ };
use serde_path_to_error::deserialize;
mod env_helper;
mod sig_verifier;

#[derive(Serialize)]
#[allow(non_snake_case)]
struct ProofResponse {
    // productFootprintId: String,
    // proofReceipt: String,
    receipt: risc0_zkvm::Receipt,
    // proofReference: String,
    // pcf: f64,
    image_id: String,
}

const TOPIC_IN: &str = "shipments";
const TOPIC_OUT: &str = "pcf-results";

async fn process_payload(payload_str: &str) -> Option<ProductProof> {
    // println!("Rohdaten der Nachricht: {}", payload_str);
    // Versuch direkt zu parsen (raw JSON)
    if let Ok(proof_response) = try_handle_raw_json(payload_str).await {
        return Some(proof_response);
    }

    // Falls das fehlschlägt, versuche es als stringifizierten JSON-String zu entpacken
    let inner_json_str: String = match serde_json::from_str(payload_str) {
        Ok(s) => s,
        Err(e) => {
            eprintln!("Fehler beim Entpacken des JSON-Strings: {}", e);
            return None;
        }
    };

    try_handle_raw_json(&inner_json_str).await.ok()
}

async fn try_handle_raw_json(shipments_json: &str) -> Result<ProductProof, ()> {
    match handle_kafka_message(shipments_json).await {
        Some(resp) => Ok(resp),
        None => Err(()),
    }
}

#[tokio::main]
async fn main() {
    let brokers = std::env::var("KAFKA_BROKER").unwrap_or_else(|_| "localhost:9092".to_string());
    env_logger::init();

    let consumer: StreamConsumer = ClientConfig::new()
        .set("bootstrap.servers", &brokers)
        .set("security.protocol", "PLAINTEXT")
        .set("group.id", "risc0-pcf-kafka-group")
        .set("auto.offset.reset", "earliest")
        .set("enable.auto.commit", "true")
        .set("auto.commit.interval.ms", "5000")
        .set("message.max.bytes", "104857600")
        .create()
        .expect("Consumer creation failed");

    consumer.subscribe(&[TOPIC_IN]).unwrap();

    let producer: FutureProducer = ClientConfig::new()
        .set("bootstrap.servers", &brokers)
        .set("security.protocol", "PLAINTEXT")
        .create()
        .expect("Producer creation failed");

    loop {
        match consumer.recv().await {
            Ok(message) => {
                match message.payload_view::<str>() {
                    Some(Ok(payload_str)) => {
                        if let Some(proof_response) = process_payload(payload_str).await {
                            let result_json = serde_json
                                ::to_string(&proof_response)
                                .expect("Failed to serialize proof_response");
                            let record = FutureRecord::to(TOPIC_OUT)
                                .payload(&result_json)
                                .key("some-key");
                            let _ = producer.send(record, Duration::from_secs(10)).await;
                        } else {
                            info!("Ungültige Nachricht wurde ignoriert.");
                        }
                    }
                    Some(Err(e)) => eprintln!("Payload UTF-8 error: {}", e),
                    None => eprintln!("No payload"),
                }
            }
            Err(e) => eprintln!("Kafka error receiving message: {:?}", e),
        }
    }
}

async fn handle_kafka_message(shipments_json: &str) -> Option<ProductProof> {
    println!("-------- Host: Received message --------");

        let mut de = serde_json::Deserializer::from_str(shipments_json);
    let mut proving_document: ProofingDocument = match deserialize(&mut de) {
        Ok(s) => s,
        Err(e) => {
            eprintln!(
                "Host: Failed to deserialize message at path '{}': {}",
                e.path(),
                e
            );
            return None;
        }
    };
    println!("Host: Received proving document with ID: {}", proving_document.productFootprint.id);
    println!("Host: From Company: {}", proving_document.productFootprint.companyName);

    // Take away the proof extension from the proving document
    let proof_vec = proving_document.proof;

    // Take away the signed sensor data from the proving document
    //let taken_signed_sensor_data = proving_document.signedSensorData.take();
    proving_document.proof = Vec::new();
    // Build the ExecutorEnv
    let mut builder = ExecutorEnv::builder();
    let executor_env_builder = builder
        .write(&proving_document)
        .expect("Host: Failed to write proving_document to ExecutorEnv builder");

    process_and_write_proofs(&proof_vec, executor_env_builder);
    //process_and_write_signatures(&taken_signed_sensor_data, executor_env_builder);

    let env = executor_env_builder.build().expect("Host: Failed to build ExecutorEnv!");

    // Start the proving process
    let prover = default_prover();
    println!("ELF size: {}", GUEST_PROOFING_LOGIC_ELF.len());

    let prove_info = match prover.prove(env, GUEST_PROOFING_LOGIC_ELF) {
        Ok(info) => info,
        Err(e) => {
            eprintln!("Host: Error while proving: {}", e);
            return None;
        }
    };

    let receipt = prove_info.receipt;

    let (journal_output, serialized_sig_containers): (f64, Vec<u8>) = match receipt.journal.decode() {
        Ok(data) => data,
        Err(e) => {
            eprintln!("Host: Failed to decode journal: {}", e);
            return None;
        }
    };

    // let sig_containers: Vec<SignatureContainer> = match bincode::deserialize(&serialized_sig_containers) {
    //     Ok(containers) => containers,
    //     Err(e) => {
    //         eprintln!("Host: Failed to deserialize signature containers: {}", e);
    //         return None;
    //     }
    // };

    if let Err(e) = receipt.verify(GUEST_PROOFING_LOGIC_ID) {
        eprintln!("Host: Receipt verification failed: {}", e);
        return None;
    }

    let receipt_bytes = match bincode::serialize(&receipt) {
        Ok(bytes) => bytes,
        Err(e) => {
            eprintln!("Host: Failed to serialize receipt: {}", e);
            return None;
        }
    };
    let encoded_receipt = general_purpose::STANDARD.encode(receipt_bytes);

    println!("Journal output: {}", journal_output);

    println!("Handed over response ...\n");

    let proof_respone = ProductProof {
        productFootprintId: proving_document.productFootprint.id,
        proofReceipt: encoded_receipt,
        proofReference: "123".to_string(),
        pcf: journal_output,
        imageId: hex::encode(bytemuck::cast_slice(&GUEST_PROOFING_LOGIC_ID)),
    };

    // Write Output to file (for debugging purposes)
    let json_string = serde_json::to_string_pretty(&proof_respone).ok()?;
    let mut file = File::create("output.json").ok()?;
    file.write_all(&json_string.as_bytes()).ok()?;

    Some(proof_respone)
}

#[cfg(test)]
mod tests {
    use super::handle_kafka_message;
    use crate::{ ProofResponse };
    use proving_service_core::product_footprint::ProductProof;
    use tokio;
    use std::fs;

    #[tokio::test]
    async fn smoke_test_with_realistic_shipments_json() -> Result<(), Box<dyn std::error::Error>> {
        let json_content = fs::read_to_string("src/shipment_4.json")?;

        // Call kafka handler
        let resp: ProductProof = handle_kafka_message(&json_content).await.expect(
            "kafka_handler_failed"
        ); /*
        assert!(!resp.proof_receipt.is_empty(), "receipt must be generated");
        assert!(resp.journal_output.is_finite(), "journal_output must be numeric");
        assert!(!resp.image_id.is_empty(), "image_id must be present");
        println!("{}", resp.journal_output);*/
        Ok(())
    }
}
